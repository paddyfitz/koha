.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Members 3"
.TH C4::Members 3 "2010-12-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Members \- Perl Module containing convenience functions for member handling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::Members;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains routines for adding, modifying and deleting members/patrons/borrowers
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "SearchMember" 2
.IX Item "SearchMember"
.Vb 1
\&  ($count, $borrowers) = &SearchMember($searchstring, $type,$category_type,$filter,$showallbranches);
.Ve
.PP
Looks up patrons (borrowers) by name.
.PP
\&\s-1BUGFIX\s0 499: \f(CW$type\fR is now used to determine type of search.
if \f(CW$type\fR is \*(L"simple\*(R", search is performed on the first letter of the
surname only.
.PP
\&\f(CW$category_type\fR is used to get a specified type of user. 
(mainly adults when creating a child.)
.PP
\&\f(CW$searchstring\fR is a space-separated list of search terms. Each term
must match the beginning a borrower's surname, first name, or other
name.
.PP
\&\f(CW$filter\fR is assumed to be a list of elements to filter results on
.PP
\&\f(CW$showallbranches\fR is used in IndependentBranchPatron Context to display all branches results.
.PP
\&\f(CW&SearchMember\fR returns a two-element list. \f(CW$borrowers\fR is a
reference-to-array; each element is a reference-to-hash, whose keys
are the fields of the \f(CW\*(C`borrowers\*(C'\fR table in the Koha database.
\&\f(CW$count\fR is the number of elements in \f(CW$borrowers\fR.
.SS "GetMemberDetails"
.IX Subsection "GetMemberDetails"
($borrower) = &GetMemberDetails($borrowernumber, \f(CW$cardnumber\fR);
.PP
Looks up a patron and returns information about him or her. If
\&\f(CW$borrowernumber\fR is true (nonzero), \f(CW&GetMemberDetails\fR looks
up the borrower by number; otherwise, it looks up the borrower by card
number.
.PP
\&\f(CW$borrower\fR is a reference-to-hash whose keys are the fields of the
borrowers table in the Koha database. In addition,
\&\f(CW\*(C`$borrower\->{flags}\*(C'\fR is a hash giving more detailed information
about the patron. Its keys act as flags :
.PP
.Vb 3
\&    if $borrower\->{flags}\->{LOST} {
\&        # Patron\*(Aqs card was reported lost
\&    }
.Ve
.PP
If the state of a flag means that the patron should not be
allowed to borrow any more books, then it will have a \f(CW\*(C`noissues\*(C'\fR key
with a true value.
.PP
See patronflags for more details.
.PP
\&\f(CW\*(C`$borrower\->{authflags}\*(C'\fR is a hash giving more detailed information
about the top-level permissions flags set for the borrower.  For example,
if a user has the \*(L"editcatalogue\*(R" permission,
\&\f(CW\*(C`$borrower\->{authflags}\->{editcatalogue}\*(C'\fR will exist and have
the value \*(L"1\*(R".
.SS "patronflags"
.IX Subsection "patronflags"
.Vb 1
\& $flags = &patronflags($patron);
\&
\& This function is not exported.
\&
\& The following will be set where applicable:
\& $flags\->{CHARGES}\->{amount}        Amount of debt
\& $flags\->{CHARGES}\->{noissues}      Set if debt amount >$5.00 (or syspref noissuescharge)
\& $flags\->{CHARGES}\->{message}       Message \-\- deprecated
\&
\& $flags\->{CREDITS}\->{amount}        Amount of credit
\& $flags\->{CREDITS}\->{message}       Message \-\- deprecated
\&
\& $flags\->{  GNA  }                  Patron has no valid address
\& $flags\->{  GNA  }\->{noissues}      Set for each GNA
\& $flags\->{  GNA  }\->{message}       "Borrower has no valid address" \-\- deprecated
\&
\& $flags\->{ LOST  }                  Patron\*(Aqs card reported lost
\& $flags\->{ LOST  }\->{noissues}      Set for each LOST
\& $flags\->{ LOST  }\->{message}       Message \-\- deprecated
\&
\& $flags\->{DBARRED}                  Set if patron debarred, no access
\& $flags\->{DBARRED}\->{noissues}      Set for each DBARRED
\& $flags\->{DBARRED}\->{message}       Message \-\- deprecated
\&
\& $flags\->{ NOTES }
\& $flags\->{ NOTES }\->{message}       The note itself.  NOT deprecated
\&
\& $flags\->{ ODUES }                  Set if patron has overdue books.
\& $flags\->{ ODUES }\->{message}       "Yes"  \-\- deprecated
\& $flags\->{ ODUES }\->{itemlist}      ref\-to\-array: list of overdue books
\& $flags\->{ ODUES }\->{itemlisttext}  Text list of overdue items \-\- deprecated
\&
\& $flags\->{WAITING}                  Set if any of patron\*(Aqs reserves are available
\& $flags\->{WAITING}\->{message}       Message \-\- deprecated
\& $flags\->{WAITING}\->{itemlist}      ref\-to\-array: list of available items
.Ve
.Sp
.RS 4
\&\f(CW\*(C`$flags\->{ODUES}\->{itemlist}\*(C'\fR is a reference-to-array listing the
overdue items. Its elements are references-to-hash, each describing an
overdue item. The keys are selected fields from the issues, biblio,
biblioitems, and items tables of the Koha database.
.Sp
\&\f(CW\*(C`$flags\->{ODUES}\->{itemlisttext}\*(C'\fR is a string giving a text listing of
the overdue items, one per line.  Deprecated.
.Sp
\&\f(CW\*(C`$flags\->{WAITING}\->{itemlist}\*(C'\fR is a reference-to-array listing the
available items. Each element is a reference-to-hash whose keys are
fields from the reserves table of the Koha database.
.RE
.PP
All the \*(L"message\*(R" fields that include language generated in this function are deprecated, 
because such strings belong properly in the display layer.
.PP
The \*(L"message\*(R" field that comes from the \s-1DB\s0 is \s-1OK\s0.
.SS "GetMember"
.IX Subsection "GetMember"
.Vb 1
\&  $borrower = &GetMember($information, $type);
.Ve
.PP
Looks up information about a patron (borrower) by either card number
,firstname, or borrower number, depending on \f(CW$type\fR value.
If \f(CW$type\fR == 'cardnumber', \f(CW&GetBorrower\fR
searches by cardnumber then by firstname if not found in cardnumber; 
otherwise, it searches by borrowernumber.
.PP
\&\f(CW&GetBorrower\fR returns a reference-to-hash whose keys are the fields of
the \f(CW\*(C`borrowers\*(C'\fR table in the Koha database.
.SS "GetMemberIssuesAndFines"
.IX Subsection "GetMemberIssuesAndFines"
.Vb 1
\&  ($overdue_count, $issue_count, $total_fines) = &GetMemberIssuesAndFines($borrowernumber);
.Ve
.PP
Returns aggregate data about items borrowed by the patron with the
given borrowernumber.
.PP
\&\f(CW&GetMemberIssuesAndFines\fR returns a three-element array.  \f(CW$overdue_count\fR is the
number of overdue items the patron currently has borrowed. \f(CW$issue_count\fR is the
number of books the patron currently has borrowed.  \f(CW$total_fines\fR is
the total fine currently due by the borrower.
.SS ""
.IX Subsection ""
.SS "ModMember"
.IX Subsection "ModMember"
.RS 4
my \f(CW$success\fR = ModMember(borrowernumber => \f(CW$borrowernumber\fR, [ field => value ]... );
.Sp
Modify borrower's data.  All date fields should \s-1ALREADY\s0 be in \s-1ISO\s0 format.
.Sp
return :
true on success, or false on failure
.RE
.SS ""
.IX Subsection ""
.SS "AddMember"
.IX Subsection "AddMember"
.Vb 1
\&  $borrowernumber = &AddMember(%borrower);
.Ve
.PP
insert new borrower into table
Returns the borrowernumber
.SS "fixup_cardnumber"
.IX Subsection "fixup_cardnumber"
Warning: The caller is responsible for locking the members table in write
mode, to avoid database corruption.
.SS "GetGuarantees"
.IX Subsection "GetGuarantees"
.Vb 3
\&  ($num_children, $children_arrayref) = &GetGuarantees($parent_borrno);
\&  $child0_cardno = $children_arrayref\->[0]{"cardnumber"};
\&  $child0_borrno = $children_arrayref\->[0]{"borrowernumber"};
.Ve
.PP
\&\f(CW&GetGuarantees\fR takes a borrower number (e.g., that of a patron
with children) and looks up the borrowers who are guaranteed by that
borrower (i.e., the patron's children).
.PP
\&\f(CW&GetGuarantees\fR returns two values: an integer giving the number of
borrowers guaranteed by \f(CW$parent_borrno\fR, and a reference to an array
of references to hash, which gives the actual results.
.SS "UpdateGuarantees"
.IX Subsection "UpdateGuarantees"
.Vb 1
\&  &UpdateGuarantees($parent_borrno);
.Ve
.PP
\&\f(CW&UpdateGuarantees\fR borrower data for an adult and updates all the guarantees
with the modified information
.SS "GetPendingIssues"
.IX Subsection "GetPendingIssues"
.Vb 1
\&  my $issues = &GetPendingIssues($borrowernumber);
.Ve
.PP
Looks up what the patron with the given borrowernumber has borrowed.
.PP
\&\f(CW&GetPendingIssues\fR returns a
reference-to-array where each element is a reference-to-hash; the
keys are the fields from the \f(CW\*(C`issues\*(C'\fR, \f(CW\*(C`biblio\*(C'\fR, and \f(CW\*(C`items\*(C'\fR tables.
The keys include \f(CW\*(C`biblioitems\*(C'\fR fields except marc and marcxml.
.SS "GetAllIssues"
.IX Subsection "GetAllIssues"
.Vb 1
\&  ($count, $issues) = &GetAllIssues($borrowernumber, $sortkey, $limit);
.Ve
.PP
Looks up what the patron with the given borrowernumber has borrowed,
and sorts the results.
.PP
\&\f(CW$sortkey\fR is the name of a field on which to sort the results. This
should be the name of a field in the \f(CW\*(C`issues\*(C'\fR, \f(CW\*(C`biblio\*(C'\fR,
\&\f(CW\*(C`biblioitems\*(C'\fR, or \f(CW\*(C`items\*(C'\fR table in the Koha database.
.PP
\&\f(CW$limit\fR is the maximum number of results to return.
.PP
\&\f(CW&GetAllIssues\fR returns a two-element array. \f(CW$issues\fR is a
reference-to-array, where each element is a reference-to-hash; the
keys are the fields from the \f(CW\*(C`issues\*(C'\fR, \f(CW\*(C`biblio\*(C'\fR, \f(CW\*(C`biblioitems\*(C'\fR, and
\&\f(CW\*(C`items\*(C'\fR tables of the Koha database. \f(CW$count\fR is the number of
elements in \f(CW$issues\fR
.SS "GetMemberAccountRecords"
.IX Subsection "GetMemberAccountRecords"
.Vb 1
\&  ($total, $acctlines, $count) = &GetMemberAccountRecords($borrowernumber);
.Ve
.PP
Looks up accounting data for the patron with the given borrowernumber.
.PP
\&\f(CW&GetMemberAccountRecords\fR returns a three-element array. \f(CW$acctlines\fR is a
reference-to-array, where each element is a reference-to-hash; the
keys are the fields of the \f(CW\*(C`accountlines\*(C'\fR table in the Koha database.
\&\f(CW$count\fR is the number of elements in \f(CW$acctlines\fR. \f(CW$total\fR is the
total amount outstanding for all of the account lines.
.SS "GetBorNotifyAcctRecord"
.IX Subsection "GetBorNotifyAcctRecord"
.Vb 1
\&  ($count, $acctlines, $total) = &GetBorNotifyAcctRecord($params,$notifyid);
.Ve
.PP
Looks up accounting data for the patron with the given borrowernumber per file number.
.PP
(\s-1FIXME\s0 \- I'm not at all sure what this is about.)
.PP
\&\f(CW&GetBorNotifyAcctRecord\fR returns a three-element array. \f(CW$acctlines\fR is a
reference-to-array, where each element is a reference-to-hash; the
keys are the fields of the \f(CW\*(C`accountlines\*(C'\fR table in the Koha database.
\&\f(CW$count\fR is the number of elements in \f(CW$acctlines\fR. \f(CW$total\fR is the
total amount outstanding for all of the account lines.
.SS "checkuniquemember (OUEST-PROVENCE)"
.IX Subsection "checkuniquemember (OUEST-PROVENCE)"
.Vb 1
\&  ($result,$categorycode)  = &checkuniquemember($collectivity,$surname,$firstname,$dateofbirth);
.Ve
.PP
Checks that a member exists or not in the database.
.PP
\&\f(CW&result\fR is nonzero (=exist) or 0 (=does not exist)
\&\f(CW&categorycode\fR is from categorycode table
\&\f(CW&collectivity\fR is 1 (= we add a collectivity) or 0 (= we add a physical member)
\&\f(CW&surname\fR is the surname
\&\f(CW&firstname\fR is the firstname (only if collectivity=0)
\&\f(CW&dateofbirth\fR is the date of birth in \s-1ISO\s0 format (only if collectivity=0)
.SS "getzipnamecity (OUEST-PROVENCE)"
.IX Subsection "getzipnamecity (OUEST-PROVENCE)"
take all info from table city for the fields city and  zip
check for the name and the zip code of the city selected
.SS "getdcity (OUEST-PROVENCE)"
.IX Subsection "getdcity (OUEST-PROVENCE)"
recover cityid  with city_name condition
.SS "GetExpiryDate"
.IX Subsection "GetExpiryDate"
.Vb 1
\&  $expirydate = GetExpiryDate($categorycode, $dateenrolled);
.Ve
.PP
Calculate expiry date given a categorycode and starting date.  Date argument must be in \s-1ISO\s0 format.
Return date is also in \s-1ISO\s0 format.
.SS "checkuserpassword (OUEST-PROVENCE)"
.IX Subsection "checkuserpassword (OUEST-PROVENCE)"
check for the password and login are not used
return the number of record 
0=> \s-1NOT\s0 \s-1USED\s0 1=> \s-1USED\s0
.SS "GetborCatFromCatType"
.IX Subsection "GetborCatFromCatType"
.Vb 1
\&  ($codes_arrayref, $labels_hashref) = &GetborCatFromCatType();
.Ve
.PP
Looks up the different types of borrowers in the database. Returns two
elements: a reference-to-array, which lists the borrower category
codes, and a reference-to-hash, which maps the borrower category codes
to category descriptions.
.SS "GetBorrowercategory"
.IX Subsection "GetBorrowercategory"
.Vb 1
\&  $hashref = &GetBorrowercategory($categorycode);
.Ve
.PP
Given the borrower's category code, the function returns the corresponding
data hashref for a comprehensive information display.
.PP
.Vb 2
\&  $arrayref_hashref = &GetBorrowercategory;
\&If no category code provided, the function returns all the categories.
.Ve
.SS "GetBorrowercategoryList"
.IX Subsection "GetBorrowercategoryList"
.Vb 2
\&  $arrayref_hashref = &GetBorrowercategoryList;
\&If no category code provided, the function returns all the categories.
.Ve
.SS "ethnicitycategories"
.IX Subsection "ethnicitycategories"
.Vb 1
\&  ($codes_arrayref, $labels_hashref) = &ethnicitycategories();
.Ve
.PP
Looks up the different ethnic types in the database. Returns two
elements: a reference-to-array, which lists the ethnicity codes, and a
reference-to-hash, which maps the ethnicity codes to ethnicity
descriptions.
.SS "fixEthnicity"
.IX Subsection "fixEthnicity"
.Vb 1
\&  $ethn_name = &fixEthnicity($ethn_code);
.Ve
.PP
Takes an ethnicity code (e.g., \*(L"european\*(R" or \*(L"pi\*(R") and returns the
corresponding descriptive name from the \f(CW\*(C`ethnicity\*(C'\fR table in the
Koha database (\*(L"European\*(R" or \*(L"Pacific Islander\*(R").
.SS "GetAge"
.IX Subsection "GetAge"
.Vb 1
\&  $dateofbirth,$date = &GetAge($date);
.Ve
.PP
this function return the borrowers age with the value of dateofbirth
.ie n .SS "get_institutions $insitutions = \fIget_institutions()\fP;"
.el .SS "get_institutions \f(CW$insitutions\fP = \fIget_institutions()\fP;"
.IX Subsection "get_institutions $insitutions = get_institutions();"
Just returns a list of all the borrowers of type I, borrownumber and name
.SS "add_member_orgs"
.IX Subsection "add_member_orgs"
.Vb 1
\&  add_member_orgs($borrowernumber,$borrowernumbers);
.Ve
.PP
Takes a borrowernumber and a list of other borrowernumbers and inserts them into the borrowers_to_borrowers table
.SS "GetCities (OUEST-PROVENCE)"
.IX Subsection "GetCities (OUEST-PROVENCE)"
.Vb 1
\&  ($id_cityarrayref, $city_hashref) = &GetCities();
.Ve
.PP
Looks up the different city and zip in the database. Returns two
elements: a reference-to-array, which lists the zip city
codes, and a reference-to-hash, which maps the name of the city.
\&\s-1WHERE\s0 =>\s-1OUEST\s0 \s-1PROVENCE\s0 \s-1OR\s0 \s-1EXTERIEUR\s0
.SS "GetSortDetails (OUEST-PROVENCE)"
.IX Subsection "GetSortDetails (OUEST-PROVENCE)"
.Vb 1
\&  ($lib) = &GetSortDetails($category,$sortvalue);
.Ve
.PP
Returns the authorized value  details
\&\f(CW&$lib\fRreturn value of authorized value details
\&\f(CW&$sortvalue\fRthis is the value of authorized value 
\&\f(CW&$category\fRthis is the value of authorized value category
.SS "MoveMemberToDeleted"
.IX Subsection "MoveMemberToDeleted"
.Vb 1
\&  $result = &MoveMemberToDeleted($borrowernumber);
.Ve
.PP
Copy the record from borrowers to deletedborrowers table.
.SS "DelMember"
.IX Subsection "DelMember"
DelMember($borrowernumber);
.PP
This function remove directly a borrower whitout writing it on deleteborrower.
+ Deletes reserves for the borrower
.SS "ExtendMemberSubscriptionTo (OUEST-PROVENCE)"
.IX Subsection "ExtendMemberSubscriptionTo (OUEST-PROVENCE)"
.Vb 1
\&    $date = ExtendMemberSubscriptionTo($borrowerid, $date);
.Ve
.PP
Extending the subscription to a given date or to the expiry date calculated on \s-1ISO\s0 date.
Returns \s-1ISO\s0 date.
.SS "GetRoadTypes (OUEST-PROVENCE)"
.IX Subsection "GetRoadTypes (OUEST-PROVENCE)"
.Vb 1
\&  ($idroadtypearrayref, $roadttype_hashref) = &GetRoadTypes();
.Ve
.PP
Looks up the different road type . Returns two
elements: a reference-to-array, which lists the id_roadtype
codes, and a reference-to-hash, which maps the road type of the road .
.SS "GetTitles (OUEST-PROVENCE)"
.IX Subsection "GetTitles (OUEST-PROVENCE)"
.Vb 1
\&  ($borrowertitle)= &GetTitles();
.Ve
.PP
Looks up the different title . Returns array  with all borrowers title
.SS "GetPatronImage"
.IX Subsection "GetPatronImage"
.Vb 1
\&    my ($imagedata, $dberror) = GetPatronImage($cardnumber);
.Ve
.PP
Returns the mimetype and binary image data of the image for the patron with the supplied cardnumber.
.SS "PutPatronImage"
.IX Subsection "PutPatronImage"
.Vb 1
\&    PutPatronImage($cardnumber, $mimetype, $imgfile);
.Ve
.PP
Stores patron binary image data and mimetype in database.
\&\s-1NOTE:\s0 This function is good for updating images as well as inserting new images in the database.
.SS "RmPatronImage"
.IX Subsection "RmPatronImage"
.Vb 1
\&    my ($dberror) = RmPatronImage($cardnumber);
.Ve
.PP
Removes the image for the patron with the supplied cardnumber.
.SS "GetRoadTypeDetails (OUEST-PROVENCE)"
.IX Subsection "GetRoadTypeDetails (OUEST-PROVENCE)"
.Vb 1
\&  ($roadtype) = &GetRoadTypeDetails($roadtypeid);
.Ve
.PP
Returns the description of roadtype
\&\f(CW&$roadtype\fRreturn description of road type
\&\f(CW&$roadtypeid\fRthis is the value of roadtype s
.SS "GetBorrowersWhoHaveNotBorrowedSince"
.IX Subsection "GetBorrowersWhoHaveNotBorrowedSince"
&GetBorrowersWhoHaveNotBorrowedSince($date)
.PP
this function get all borrowers who haven't borrowed since the date given on input arg.
.SS "GetBorrowersWhoHaveNeverBorrowed"
.IX Subsection "GetBorrowersWhoHaveNeverBorrowed"
\&\f(CW$results\fR = &GetBorrowersWhoHaveNeverBorrowed
.PP
this function get all borrowers who have never borrowed.
.PP
\&\fI\f(CI$result\fI\fR is a ref to an array which all elements are a hasref.
.SS "GetBorrowersWithIssuesHistoryOlderThan"
.IX Subsection "GetBorrowersWithIssuesHistoryOlderThan"
\&\f(CW$results\fR = &GetBorrowersWithIssuesHistoryOlderThan($date)
.PP
this function get all borrowers who has an issue history older than \fI\f(CI$date\fI\fR given on input arg.
.PP
\&\fI\f(CI$result\fI\fR is a ref to an array which all elements are a hashref.
This hashref is containt the number of time this borrowers has borrowed before \fI\f(CI$date\fI\fR and the borrowernumber.
.SS "GetBorrowersNamesAndLatestIssue"
.IX Subsection "GetBorrowersNamesAndLatestIssue"
\&\f(CW$results\fR = &GetBorrowersNamesAndLatestIssueList(@borrowernumbers)
.PP
this function get borrowers Names and surnames and Issue information.
.PP
\&\fI\f(CI@borrowernumbers\fI\fR is an array which all elements are borrowernumbers.
This hashref is containt the number of time this borrowers has borrowed before \fI\f(CI$date\fI\fR and the borrowernumber.
.SS "DebarMember"
.IX Subsection "DebarMember"
.RS 4
my \f(CW$success\fR = DebarMember( \f(CW$borrowernumber\fR );
.Sp
marks a Member as debarred, and therefore unable to checkout any more
items.
.Sp
return :
true on success, false on failure
.RE
.SS "IsMemberBlocked"
.IX Subsection "IsMemberBlocked"
.RS 4
my \f(CW$blocked\fR = IsMemberBlocked( \f(CW$borrowernumber\fR );
.Sp
return the status, and the number of day or documents, depends his punishment
.Sp
return :
\&\-1 if the user have overdue returns
1 if the user is punished X days
0 if the user is authorised to loan
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Team
