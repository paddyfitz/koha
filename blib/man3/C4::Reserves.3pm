.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Reserves 3"
.TH C4::Reserves 3 "2010-12-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Reserves \- Koha functions for dealing with reservation.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use C4::Reserves;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&  this modules provides somes functions to deal with reservations.
\&  
\&  Reserves are stored in reserves table.
\&  The following columns contains important values :
\&  \- priority >0      : then the reserve is at 1st stage, and not yet affected to any item.
\&             =0      : then the reserve is being dealed
\&  \- found : NULL       : means the patron requested the 1st available, and we haven\*(Aqt choosen the item
\&            W(aiting)  : the reserve has an itemnumber affected, and is on the way
\&            T(ransfet) : the reserve has an itemnumber affected, and is beeing transfered to pickup branch
\&            F(inished) : the reserve has been completed, and is done
\&  \- itemnumber : empty : the reserve is still unaffected to an item
\&                 filled: the reserve is attached to an item
\&  The complete workflow is :
\&  ==== 1st use case ====
\&  patron request a document, 1st available :                      P >0, F=NULL, I=NULL
\&  a library having it run "transfertodo", and clic on the list    
\&         if there is no transfer to do, the reserve waiting
\&         patron can pick it up                                    P =0, F=W,    I=filled 
\&         if there is a transfer to do, write in branchtransfer    P =0, F=NULL, I=filled
\&           The pickup library recieve the book, it check in       P =0, F=W,    I=filled
\&  The patron borrow the book                                      P =0, F=F,    I=filled
\&  
\&  ==== 2nd use case ====
\&  patron requests a document, a given item,
\&    If pickup is holding branch                                   P =0, F=W,   I=filled
\&    If transfer needed, write in branchtransfer                   P =0, F=NULL, I=filled
\&        The pickup library recieve the book, it checks it in      P =0, F=W,    I=filled
\&  The patron borrow the book                                      P =0, F=F,    I=filled
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "AddReserve" 2
.IX Item "AddReserve"
.Vb 1
\&    AddReserve($branch,$borrowernumber,$biblionumber,$constraint,$bibitems,$priority,$notes,$title,$checkitem,$found, $from)
.Ve
.IP "GetPendingReserves" 2
.IX Item "GetPendingReserves"
.PD 0
.IP "GetReservesFromBiblionumber" 2
.IX Item "GetReservesFromBiblionumber"
.PD
($count, \f(CW$title_reserves\fR) = &GetReserves($biblionumber);
.Sp
This function gets the list of reservations for one \f(CW$biblionumber\fR, returning a count
of the reserves and an arrayref pointing to the reserves for \f(CW$biblionumber\fR.
.IP "GetReservesFromItemnumber" 2
.IX Item "GetReservesFromItemnumber"
.Vb 1
\& ( $reservedate, $borrowernumber, $branchcode ) = GetReservesFromItemnumber($itemnumber);
\&
\&   TODO :: Description here
.Ve
.IP "GetReservesFromBorrowernumber" 2
.IX Item "GetReservesFromBorrowernumber"
.Vb 1
\&    $borrowerreserv = GetReservesFromBorrowernumber($borrowernumber,$tatus);
\&    
\&    TODO :: Descritpion
.Ve
.IP "CanBookBeReserved" 2
.IX Item "CanBookBeReserved"
\&\f(CW$error\fR = &CanBookBeReserved($borrowernumber, \f(CW$biblionumber\fR)
.IP "CanItemBeReserved" 2
.IX Item "CanItemBeReserved"
\&\f(CW$error\fR = &CanItemBeReserved($borrowernumber, \f(CW$itemnumber\fR)
.Sp
this function return 1 if an item can be issued by this borrower.
.IP "GetReserveCount" 2
.IX Item "GetReserveCount"
\&\f(CW$number\fR = &GetReserveCount($borrowernumber);
.Sp
this function returns the number of reservation for a borrower given on input arg.
.IP "GetOtherReserves" 2
.IX Item "GetOtherReserves"
($messages,$nextreservinfo)=$GetOtherReserves(itemnumber);
.Sp
Check queued list of this document and check if this document must be  transfered
.IP "GetReserveFee" 2
.IX Item "GetReserveFee"
\&\f(CW$fee\fR = GetReserveFee($borrowernumber,$biblionumber,$constraint,$biblionumber);
.Sp
Calculate the fee for a reserve
.IP "GetReservesToBranch" 2
.IX Item "GetReservesToBranch"
\&\f(CW@transreserv\fR = GetReservesToBranch( \f(CW$frombranch\fR );
.Sp
Get reserve list for a given branch
.IP "GetReservesForBranch" 2
.IX Item "GetReservesForBranch"
\&\f(CW@transreserv\fR = GetReservesForBranch($frombranch);
.IP "CheckReserves" 2
.IX Item "CheckReserves"
.Vb 1
\&  ($status, $reserve) = &CheckReserves($itemnumber);
.Ve
.Sp
Find a book in the reserves.
.Sp
\&\f(CW$itemnumber\fR is the book's item number.
.Sp
As I understand it, \f(CW&CheckReserves\fR looks for the given item in the
reserves. If it is found, that's a match, and \f(CW$status\fR is set to
\&\f(CW\*(C`Waiting\*(C'\fR.
.Sp
Otherwise, it finds the most important item in the reserves with the
same biblio number as this book (I'm not clear on this) and returns it
with \f(CW$status\fR set to \f(CW\*(C`Reserved\*(C'\fR.
.Sp
\&\f(CW&CheckReserves\fR returns a two-element list:
.Sp
\&\f(CW$status\fR is either \f(CW\*(C`Waiting\*(C'\fR, \f(CW\*(C`Reserved\*(C'\fR (see above), or 0.
.Sp
\&\f(CW$reserve\fR is the reserve item that matched. It is a
reference-to-hash whose keys are mostly the fields of the reserves
table in the Koha database.
.IP "CancelReserve" 2
.IX Item "CancelReserve"
.Vb 1
\&  &CancelReserve($biblionumber, $itemnumber, $borrowernumber);
.Ve
.Sp
Cancels a reserve.
.Sp
Use either \f(CW$biblionumber\fR or \f(CW$itemnumber\fR to specify the item to
cancel, but not both: if both are given, \f(CW&CancelReserve\fR does
nothing.
.Sp
\&\f(CW$borrowernumber\fR is the borrower number of the patron on whose
behalf the book was reserved.
.Sp
If \f(CW$biblionumber\fR was given, \f(CW&CancelReserve\fR also adjusts the
priorities of the other people who are waiting on the book.
.IP "ModReserve" 2
.IX Item "ModReserve"
.RS 2
.RS 4
ModReserve($rank, \f(CW$biblio\fR, \f(CW$borrower\fR, \f(CW$branch\fR[, \f(CW$itemnumber\fR])
.RE
.RE
.RS 2
.Sp
Change a hold request's priority or cancel it.
.Sp
\&\f(CW$rank\fR specifies the effect of the change.  If \f(CW$rank\fR
is 'W' or 'n', nothing happens.  This corresponds to leaving a
request alone when changing its priority in the holds queue
for a bib.
.Sp
If \f(CW$rank\fR is 'del', the hold request is cancelled.
.Sp
If \f(CW$rank\fR is an integer greater than zero, the priority of
the request is set to that value.  Since priority != 0 means
that the item is not waiting on the hold shelf, setting the 
priority to a non-zero value also sets the request's found
status and waiting date to \s-1NULL\s0.
.Sp
The optional \f(CW$itemnumber\fR parameter is used only when
\&\f(CW$rank\fR is a non-zero integer; if supplied, the itemnumber 
of the hold request is set accordingly; if omitted, the itemnumber
is cleared.
.Sp
\&\s-1FIXME:\s0 Note that the forgoing can have the effect of causing
item-level hold requests to turn into title-level requests.  This
will be fixed once reserves has separate columns for requested
itemnumber and supplying itemnumber.
.RE
.IP "ModReserveFill" 2
.IX Item "ModReserveFill"
.Vb 1
\&  &ModReserveFill($reserve);
.Ve
.Sp
Fill a reserve. If I understand this correctly, this means that the
reserved book has been found and given to the patron who reserved it.
.Sp
\&\f(CW$reserve\fR specifies the reserve to fill. It is a reference-to-hash
whose keys are fields from the reserves table in the Koha database.
.IP "ModReserveStatus" 2
.IX Item "ModReserveStatus"
&ModReserveStatus($itemnumber, \f(CW$newstatus\fR);
.Sp
Update the reserve status for the active (priority=0) reserve.
.Sp
\&\f(CW$itemnumber\fR is the itemnumber the reserve is on
.Sp
\&\f(CW$newstatus\fR is the new status.
.IP "ModReserveAffect" 2
.IX Item "ModReserveAffect"
&ModReserveAffect($itemnumber,$borrowernumber,$diffBranchSend);
.Sp
This function affect an item and a status for a given reserve
The itemnumber parameter is used to find the biblionumber.
with the biblionumber & the borrowernumber, we can affect the itemnumber
to the correct reserve.
.Sp
if \f(CW$transferToDo\fR is not set, then the status is set to \*(L"Waiting\*(R" as well.
otherwise, a transfer is on the way, and the end of the transfer will 
take care of the waiting status
.IP "ModReserveCancelAll" 2
.IX Item "ModReserveCancelAll"
($messages,$nextreservinfo) = &ModReserveCancelAll($itemnumber,$borrowernumber);
.Sp
.Vb 1
\&    function to cancel reserv,check other reserves, and transfer document if it\*(Aqs necessary
.Ve
.IP "ModReserveMinusPriority" 2
.IX Item "ModReserveMinusPriority"
&ModReserveMinusPriority($itemnumber,$borrowernumber,$biblionumber)
.Sp
Reduce the values of queuded list
.IP "GetReserveInfo" 2
.IX Item "GetReserveInfo"
&GetReserveInfo($borrowernumber,$biblionumber);
.Sp
.Vb 2
\& Get item and borrower details for a current hold.
\& Current implementation this query should have a single result.
.Ve
.IP "IsAvailableForItemLevelRequest" 2
.IX Item "IsAvailableForItemLevelRequest"
.RS 2
.RS 4
my \f(CW$is_available\fR = IsAvailableForItemLevelRequest($itemnumber);
.RE
.RE
.RS 2
.Sp
Checks whether a given item record is available for an
item-level hold request.  An item is available if
.Sp
* it is not lost \s-1AND\s0 
* it is not damaged \s-1AND\s0 
* it is not withdrawn \s-1AND\s0 
* does not have a not for loan value > 0
.Sp
Whether or not the item is currently on loan is 
also checked \- if the AllowOnShelfHolds system preference
is \s-1ON\s0, an item can be requested even if it is currently
on loan to somebody else.  If the system preference
is \s-1OFF\s0, an item that is currently checked out cannot
be the target of an item-level hold request.
.Sp
Note that \fIIsAvailableForItemLevelRequest()\fR does not
check if the staff operator is authorized to place
a request on the item \- in particular,
this routine does not check IndependantBranches
and canreservefromotherbranches.
.RE
.IP "_FixPriority" 2
.IX Item "_FixPriority"
&_FixPriority($biblio,$borrowernumber,$rank);
.Sp
.Vb 6
\& Only used internally (so don\*(Aqt export it)
\& Changed how this functions works #
\& Now just gets an array of reserves in the rank order and updates them with
\& the array index (+1 as array starts from 0)
\& and if $rank is supplied will splice item from the array and splice it back in again
\& in new priority rank
.Ve
.IP "_Findgroupreserve" 2
.IX Item "_Findgroupreserve"
.Vb 1
\&  @results = &_Findgroupreserve($biblioitemnumber, $biblionumber, $itemnumber);
.Ve
.Sp
Looks for an item-specific match first, then for a title-level match, returning the
first match found.  If neither, then we look for a 3rd kind of match based on
reserve constraints.
.Sp
\&\s-1TODO:\s0 add more explanation about reserve constraints
.Sp
\&\f(CW&_Findgroupreserve\fR returns :
\&\f(CW@results\fR is an array of references-to-hash whose keys are mostly
fields from the reserves table of the Koha database, plus
\&\f(CW\*(C`biblioitemnumber\*(C'\fR.
.IP "_koha_notify_reserve" 2
.IX Item "_koha_notify_reserve"
.RS 2
.RS 4
_koha_notify_reserve( \f(CW$itemnumber\fR, \f(CW$borrowernumber\fR, \f(CW$biblionumber\fR );
.RE
.RE
.RS 2
.Sp
Sends a notification to the patron that their hold has been filled (through
ModReserveAffect, _not_ ModReserveFill)
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Developement team <info@koha.org>
