.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::ImportBatch 3"
.TH C4::ImportBatch 3 "2010-12-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::ImportBatch \- manage batches of imported MARC records
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.RS 4
use C4::ImportBatch;
.RE
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetZ3950BatchId"
.IX Subsection "GetZ3950BatchId"
.RS 4
my \f(CW$batchid\fR = GetZ3950BatchId($z3950server);
.RE
.PP
Retrieves the \s-1ID\s0 of the import batch for the Z39.50
reservoir for the given target.  If necessary,
creates the import batch.
.SS "GetImportRecordMarc"
.IX Subsection "GetImportRecordMarc"
.RS 4
my ($marcblob, \f(CW$encoding\fR) = GetImportRecordMarc($import_record_id);
.RE
.SS "AddImportBatch"
.IX Subsection "AddImportBatch"
.RS 4
my \f(CW$batch_id\fR = AddImportBatch($overlay_action, \f(CW$import_status\fR, \f(CW$type\fR, \f(CW$file_name\fR, \f(CW$comments\fR);
.RE
.SS "GetImportBatch"
.IX Subsection "GetImportBatch"
.RS 4
my \f(CW$row\fR = GetImportBatch($batch_id);
.RE
.PP
Retrieve a hashref of an import_batches row.
.SS "AddBiblioToBatch"
.IX Subsection "AddBiblioToBatch"
.RS 4
my \f(CW$import_record_id\fR = AddBiblioToBatch($batch_id, \f(CW$record_sequence\fR, \f(CW$marc_record\fR, \f(CW$encoding\fR, \f(CW$z3950random\fR, \f(CW$update_counts\fR);
.RE
.SS "ModBiblioInBatch"
.IX Subsection "ModBiblioInBatch"
.RS 4
ModBiblioInBatch($import_record_id, \f(CW$marc_record\fR);
.RE
.SS "BatchStageMarcRecords"
.IX Subsection "BatchStageMarcRecords"
.RS 4
($batch_id, \f(CW$num_records\fR, \f(CW$num_items\fR, \f(CW@invalid_records\fR) = 
    BatchStageMarcRecords($marc_flavor, \f(CW$marc_records\fR, \f(CW$file_name\fR, 
                          \f(CW$comments\fR, \f(CW$branch_code\fR, \f(CW$parse_items\fR,
                          \f(CW$leave_as_staging\fR, 
                          \f(CW$progress_interval\fR, \f(CW$progress_callback\fR);
.RE
.SS "AddItemsToImportBiblio"
.IX Subsection "AddItemsToImportBiblio"
.RS 4
my \f(CW@import_items_ids\fR = AddItemsToImportBiblio($batch_id, \f(CW$import_record_id\fR, \f(CW$marc_record\fR, \f(CW$update_counts\fR);
.RE
.SS "BatchFindBibDuplicates"
.IX Subsection "BatchFindBibDuplicates"
.RS 4
my \f(CW$num_with_matches\fR = BatchFindBibDuplicates($batch_id, \f(CW$matcher\fR, \f(CW$max_matches\fR, \f(CW$progress_interval\fR, \f(CW$progress_callback\fR);
.RE
.PP
Goes through the records loaded in the batch and attempts to 
find duplicates for each one.  Sets the matching status 
of each record to \*(L"no_match\*(R" or \*(L"auto_match\*(R" as appropriate.
.PP
The \f(CW$max_matches\fR parameter is optional; if it is not supplied,
it defaults to 10.
.PP
The \f(CW$progress_interval\fR and \f(CW$progress_callback\fR parameters are 
optional; if both are supplied, the sub referred to by
\&\f(CW$progress_callback\fR will be invoked every \f(CW$progress_interval\fR
records using the number of records processed as the 
singular argument.
.SS "BatchCommitBibRecords"
.IX Subsection "BatchCommitBibRecords"
.RS 4
my ($num_added, \f(CW$num_updated\fR, \f(CW$num_items_added\fR, \f(CW$num_items_errored\fR, \f(CW$num_ignored\fR) = 
    BatchCommitBibRecords($batch_id, \f(CW$progress_interval\fR, \f(CW$progress_callback\fR);
.RE
.SS "BatchCommitItems"
.IX Subsection "BatchCommitItems"
.RS 4
($num_items_added, \f(CW$num_items_errored\fR) = BatchCommitItems($import_record_id, \f(CW$biblionumber\fR);
.RE
.SS "BatchRevertBibRecords"
.IX Subsection "BatchRevertBibRecords"
.RS 4
my ($num_deleted, \f(CW$num_errors\fR, \f(CW$num_reverted\fR, \f(CW$num_items_deleted\fR, \f(CW$num_ignored\fR) = BatchRevertBibRecords($batch_id);
.RE
.SS "BatchRevertItems"
.IX Subsection "BatchRevertItems"
.RS 4
my \f(CW$num_items_deleted\fR = BatchRevertItems($import_record_id, \f(CW$biblionumber\fR);
.RE
.SS "CleanBatch"
.IX Subsection "CleanBatch"
.RS 4
CleanBatch($batch_id)
.RE
.PP
Deletes all staged records from the import batch
and sets the status of the batch to 'cleaned'.  Note
that deleting a stage record does *not* affect
any record that has been committed to the database.
.SS "GetAllImportBatches"
.IX Subsection "GetAllImportBatches"
.RS 4
my \f(CW$results\fR = \fIGetAllImportBatches()\fR;
.RE
.PP
Returns a references to an array of hash references corresponding
to all import_batches rows (of batch_type 'batch'), sorted in 
ascending order by import_batch_id.
.SS "GetImportBatchRangeDesc"
.IX Subsection "GetImportBatchRangeDesc"
.RS 4
my \f(CW$results\fR = GetImportBatchRangeDesc($offset, \f(CW$results_per_group\fR);
.RE
.PP
Returns a reference to an array of hash references corresponding to
import_batches rows (sorted in descending order by import_batch_id)
start at the given offset.
.SS "GetItemNumbersFromImportBatch"
.IX Subsection "GetItemNumbersFromImportBatch"
.SS "GetNumberOfImportBatches"
.IX Subsection "GetNumberOfImportBatches"
.RS 4
my \f(CW$count\fR = \fIGetNumberOfImportBatches()\fR;
.RE
.SS "GetImportBibliosRange"
.IX Subsection "GetImportBibliosRange"
.RS 4
my \f(CW$results\fR = GetImportBibliosRange($batch_id, \f(CW$offset\fR, \f(CW$results_per_group\fR);
.RE
.PP
Returns a reference to an array of hash references corresponding to
import_biblios/import_records rows for a given batch
starting at the given offset.
.SS "GetBestRecordMatch"
.IX Subsection "GetBestRecordMatch"
.RS 4
my \f(CW$record_id\fR = GetBestRecordMatch($import_record_id);
.RE
.SS "GetImportBatchStatus"
.IX Subsection "GetImportBatchStatus"
.RS 4
my \f(CW$status\fR = GetImportBatchStatus($batch_id);
.RE
.SS "SetImportBatchStatus"
.IX Subsection "SetImportBatchStatus"
.RS 4
SetImportBatchStatus($batch_id, \f(CW$new_status\fR);
.RE
.SS "GetImportBatchOverlayAction"
.IX Subsection "GetImportBatchOverlayAction"
.RS 4
my \f(CW$overlay_action\fR = GetImportBatchOverlayAction($batch_id);
.RE
.SS "SetImportBatchOverlayAction"
.IX Subsection "SetImportBatchOverlayAction"
.RS 4
SetImportBatchOverlayAction($batch_id, \f(CW$new_overlay_action\fR);
.RE
.SS "GetImportBatchNoMatchAction"
.IX Subsection "GetImportBatchNoMatchAction"
.RS 4
my \f(CW$nomatch_action\fR = GetImportBatchNoMatchAction($batch_id);
.RE
.SS "SetImportBatchNoMatchAction"
.IX Subsection "SetImportBatchNoMatchAction"
.RS 4
SetImportBatchNoMatchAction($batch_id, \f(CW$new_nomatch_action\fR);
.RE
.SS "GetImportBatchItemAction"
.IX Subsection "GetImportBatchItemAction"
.RS 4
my \f(CW$item_action\fR = GetImportBatchItemAction($batch_id);
.RE
.SS "SetImportBatchItemAction"
.IX Subsection "SetImportBatchItemAction"
.RS 4
SetImportBatchItemAction($batch_id, \f(CW$new_item_action\fR);
.RE
.SS "GetImportBatchMatcher"
.IX Subsection "GetImportBatchMatcher"
.RS 4
my \f(CW$matcher_id\fR = GetImportBatchMatcher($batch_id);
.RE
.SS "SetImportBatchMatcher"
.IX Subsection "SetImportBatchMatcher"
.RS 4
SetImportBatchMatcher($batch_id, \f(CW$new_matcher_id\fR);
.RE
.SS "GetImportRecordOverlayStatus"
.IX Subsection "GetImportRecordOverlayStatus"
.RS 4
my \f(CW$overlay_status\fR = GetImportRecordOverlayStatus($import_record_id);
.RE
.SS "SetImportRecordOverlayStatus"
.IX Subsection "SetImportRecordOverlayStatus"
.RS 4
SetImportRecordOverlayStatus($import_record_id, \f(CW$new_overlay_status\fR);
.RE
.SS "GetImportRecordStatus"
.IX Subsection "GetImportRecordStatus"
.RS 4
my \f(CW$overlay_status\fR = GetImportRecordStatus($import_record_id);
.RE
.SS "SetImportRecordStatus"
.IX Subsection "SetImportRecordStatus"
.RS 4
SetImportRecordStatus($import_record_id, \f(CW$new_overlay_status\fR);
.RE
.SS "GetImportRecordMatches"
.IX Subsection "GetImportRecordMatches"
.RS 4
my \f(CW$results\fR = GetImportRecordMatches($import_record_id, \f(CW$best_only\fR);
.RE
.SS "SetImportRecordMatches"
.IX Subsection "SetImportRecordMatches"
.RS 4
SetImportRecordMatches($import_record_id, \f(CW@matches\fR);
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <info@koha.org>
.PP
Galen Charlton <galen.charlton@liblime.com>
