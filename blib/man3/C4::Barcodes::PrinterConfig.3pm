.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Barcodes::PrinterConfig 3"
.TH C4::Barcodes::PrinterConfig 3 "2010-12-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Barcodes::PrinterConfig \- Koha module dealing with labels in a PDF.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use C4::Barcodes::PrinterConfig;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package is used to deal with labels in a pdf file. Giving some parameters,
this package contains several functions to handle every label considering the 
environment of the pdf file.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "setPositionsForX" 2
.IX Item "setPositionsForX"
.Vb 1
\&        C4::Barcodes::PrinterConfig::setPositionsForX($marginLeft, $labelWidth, $columns, $pageType);
.Ve
.Sp
Calculate and stores all the X positions across the pdf page.
.Sp
\&\f(CW$marginLeft\fR Indicates how much left margin do you want in your page type.
.Sp
\&\f(CW$labelWidth\fR Indicates the width of the label that you are going to use.
.Sp
\&\f(CW$columns\fR Indicates how many columns do you want in your page type.
.Sp
\&\f(CW$pageType\fR Page type to print (eg: a4, legal, etc).
.IP "setPositionsForY" 2
.IX Item "setPositionsForY"
.Vb 1
\&        C4::Barcodes::PrinterConfig::setPositionsForY($marginBottom, $labelHeigth, $rows, $pageType);
.Ve
.Sp
Calculate and stores all tha Y positions across the pdf page.
.Sp
\&\f(CW$marginBottom\fR Indicates how much bottom margin do you want in your page type.
.Sp
\&\f(CW$labelHeigth\fR Indicates the height of the label that you are going to use.
.Sp
\&\f(CW$rows\fR Indicates how many rows do you want in your page type.
.Sp
\&\f(CW$pageType\fR Page type to print (eg: a4, legal, etc).
.IP "getLabelPosition" 2
.IX Item "getLabelPosition"
.Vb 8
\&        (my $x, my $y, $pdfObject, $pageObject, $gfxObject, $textObject, $coreObject, $labelPosition) = 
\&                                        C4::Barcodes::PrinterConfig::getLabelPosition($labelPosition, 
\&                                                                                                                                  $pdfObject, 
\&                                                                                                                                  $page,
\&                                                                                                                                  $gfx,
\&                                                                                                                                  $text,
\&                                                                                                                                  $fontObject,
\&                                                                                                                                  $pageType);
.Ve
.Sp
Return the (x,y) position of the label that you are going to print considering the environment.
.Sp
\&\f(CW$labelPosition\fR Indicates which label positions do you want to place by x and y coordinates.
.Sp
\&\f(CW$pdfObject\fR The \s-1PDF\s0 object in use.
.Sp
\&\f(CW$page\fR The page in use.
.Sp
\&\f(CW$gfx\fR The gfx resource to handle with barcodes objects.
.Sp
\&\f(CW$text\fR The text resource to handle with text.
.Sp
\&\f(CW$fontObject\fR The font object
.Sp
\&\f(CW$pageType\fR Page type to print (eg: a4, legal, etc).
.IP "labelsPage" 2
.IX Item "labelsPage"
.Vb 1
\&        my @labelTable = C4::Barcodes::PrinterConfig::labelsPage($rows, $columns);
.Ve
.Sp
This function will help you to build the labels panel, where you can choose
wich label position do you want to start the printer process.
.Sp
\&\f(CW$rows\fR Indicates how many rows do you want in your page type.
.Sp
\&\f(CW$columns\fR Indicates how many rows do you want in your page type.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Physics Library \s-1UNLP\s0 <matias_veleda@hotmail.com>
