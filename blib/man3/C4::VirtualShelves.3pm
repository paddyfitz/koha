.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::VirtualShelves 3"
.TH C4::VirtualShelves 3 "2010-12-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::VirtualShelves \- Functions for manipulating Koha virtual virtualshelves
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use C4::VirtualShelves;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions for manipulating virtual virtualshelves,
including creating and deleting virtualshelves, and adding and removing
items to and from virtualshelves.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "GetShelves" 2
.IX Item "GetShelves"
.Vb 2
\&  ($shelflist, $totshelves) = &GetShelves($mincategory, $row_count, $offset, $owner);
\&  ($shelfnumber, $shelfhash) = each %{$shelflist};
.Ve
.Sp
Returns the number of shelves specified by \f(CW$row_count\fR and \f(CW$offset\fR as well as the total
number of shelves that meet the \f(CW$owner\fR and \f(CW$mincategory\fR criteria.  \f(CW$mincategory\fR,
\&\f(CW$row_count\fR, and \f(CW$offset\fR are required. \f(CW$owner\fR must be supplied when \f(CW$mincategory\fR == 1.
When \f(CW$mincategory\fR is 2 or 3, supply undef as argument for \f(CW$owner\fR.
\&\f(CW$shelflist\fRis a reference-to-hash. The keys are the virtualshelves numbers (\f(CW$shelfnumber\fR, above),
and the values (\f(CW$shelfhash\fR, above) are themselves references-to-hash, with the following keys:
.RS 2
.ie n .IP """$shelfhash\->{shelfname}""" 4
.el .IP "\f(CW$shelfhash\->{shelfname}\fR" 4
.IX Item "$shelfhash->{shelfname}"
A string. The name of the shelf.
.ie n .IP """$shelfhash\->{count}""" 4
.el .IP "\f(CW$shelfhash\->{count}\fR" 4
.IX Item "$shelfhash->{count}"
The number of virtuals on that virtualshelves.
.RE
.RS 2
.RE
.IP "GetShelvesSummary" 2
.IX Item "GetShelvesSummary"
.Vb 1
\&        ($shelves, $total) = GetShelvesSummary($mincategory, $row_count, $offset, $owner)
.Ve
.Sp
Returns the number of shelves specified by \f(CW$row_count\fR and \f(CW$offset\fR as well as the total
number of shelves that meet the \f(CW$owner\fR and/or \f(CW$mincategory\fR criteria. \f(CW$mincategory\fR,
\&\f(CW$row_count\fR, and \f(CW$offset\fR are required. \f(CW$owner\fR must be supplied when \f(CW$mincategory\fR == 1.
When \f(CW$mincategory\fR is 2 or 3, supply undef as argument for \f(CW$owner\fR.
.IP "GetRecentShelves" 2
.IX Item "GetRecentShelves"
.Vb 1
\&        ($shelflist) = GetRecentShelves(1, $limit, $owner)
.Ve
.Sp
This function returns a references to an array of hashrefs containing specified shelves sorted
by the date the shelf was last modified in descending order limited to the number of records
specified by \f(CW$row_count\fR. If calling with \f(CW$mincategory\fR other than 1, use undef as \f(CW$owner\fR.
.Sp
This function is intended to return a dataset reflecting the most recently active shelves for
the submitted parameters.
.IP "GetShelf" 2
.IX Item "GetShelf"
.Vb 1
\&  (shelfnumber,shelfname,owner,category,sortfield) = &GetShelf($shelfnumber);
.Ve
.Sp
Looks up information about the contents of virtual virtualshelves number
\&\f(CW$shelfnumber\fR
.Sp
Returns the database's information on 'virtualshelves' table.
.IP "GetShelfContents" 2
.IX Item "GetShelfContents"
.Vb 1
\&  $itemlist = &GetShelfContents($shelfnumber);
.Ve
.Sp
Looks up information about the contents of virtual virtualshelves number
\&\f(CW$shelfnumber\fR.  Sorted by a field in the biblio table.  copyrightdate 
gives a desc sort.
.Sp
Returns a reference-to-array, whose elements are references-to-hash,
as returned by \f(CW\*(C`C4::Biblio::GetBiblioFromItemNumber\*(C'\fR.
.Sp
Note: the notforloan status comes from the itemtype, and where it equals 0
it does not ensure that related items.notforloan status is likewise 0. The
caller has to check any items on their own, possibly with CanBookBeIssued
from C4::Circulation.
.IP "AddShelf" 2
.IX Item "AddShelf"
.Vb 1
\&  $shelfnumber = &AddShelf( $shelfname, $owner, $category);
.Ve
.Sp
Creates a new virtual virtualshelves with name \f(CW$shelfname\fR, owner \f(CW$owner\fR and category
\&\f(CW$category\fR.
.Sp
Returns a code to know what's happen.
    * \-1 : if this virtualshelves already exist.
    * \f(CW$shelfnumber\fR : if success.
.IP "AddToShelf" 2
.IX Item "AddToShelf"
.Vb 1
\&  &AddToShelf($biblionumber, $shelfnumber);
.Ve
.Sp
Adds item number \f(CW$biblionumber\fR to virtual virtualshelves number
\&\f(CW$shelfnumber\fR, unless that item is already on that shelf.
.IP "AddToShelfFromBiblio" 2
.IX Item "AddToShelfFromBiblio"
.Vb 1
\&    &AddToShelfFromBiblio($biblionumber, $shelfnumber)
\&
\&    this function allow to add a virtual into the shelf number $shelfnumber
\&    from biblionumber.
.Ve
.IP "ModShelf" 2
.IX Item "ModShelf"
ModShelf($shelfnumber, \f(CW$hashref\fR)
.Sp
Where \f(CW$hashref\fR\->{column} = param
.Sp
Modify the value into virtualshelves table with values given 
from hashref, which each key of the hashref should be
the name of a column of virtualshelves.
.IP "ShelfPossibleAction" 2
.IX Item "ShelfPossibleAction"
ShelfPossibleAction($loggedinuser, \f(CW$shelfnumber\fR, \f(CW$action\fR);
.Sp
\&\f(CW\*(C`$loggedinuser,$shelfnumber,$action\*(C'\fR
.Sp
\&\f(CW$action\fR can be \*(L"view\*(R" or \*(L"manage\*(R".
.Sp
Returns 1 if the user can do the \f(CW$action\fR in the \f(CW$shelfnumber\fR shelf.
Returns 0 otherwise.
.IP "DelFromShelf" 2
.IX Item "DelFromShelf"
.Vb 1
\&  &DelFromShelf( $biblionumber, $shelfnumber);
.Ve
.Sp
Removes item number \f(CW$biblionumber\fR from virtual virtualshelves number
\&\f(CW$shelfnumber\fR. If the item wasn't on that virtualshelves to begin with,
nothing happens.
.IP "DelShelf (old version)" 2
.IX Item "DelShelf (old version)"
.Vb 1
\&  ($status, $msg) = &DelShelf($shelfnumber);
.Ve
.Sp
Deletes virtual virtualshelves number \f(CW$shelfnumber\fR. The virtualshelves must
be empty.
.Sp
Returns a two-element array, where \f(CW$status\fR is 0 if the operation
was successful, or non-zero otherwise. \f(CW$msg\fR is \*(L"Done\*(R" in case of
success, or an error message giving the reason for failure.
.IP "DelShelf (current version)" 2
.IX Item "DelShelf (current version)"
.Vb 1
\&  $Number = DelShelf($shelfnumber);
.Ve
.Sp
This function deletes the shelf number, and all of it's content.
.IP "RefreshShelvesSummary" 2
.IX Item "RefreshShelvesSummary"
.Vb 1
\&        ($total, $pubshelves, $barshelves) = RefreshShelvesSummary($sessionID, $loggedinuser, $row_count);
.Ve
.Sp
Updates the current session and userenv with the most recent shelves
.Sp
Returns the total number of shelves stored in the session/userenv along with two references each to an
array of hashes, one containing the \f(CW$loggedinuser\fR's private shelves and one containing all public/open shelves.
.Sp
This function is used in conjunction with the 'Lists' button in masthead.inc.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Developement team <info@koha.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIC4::Circulation::Circ2\fR\|(3)
