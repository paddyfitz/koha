.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Members::AttributeTypes 3"
.TH C4::Members::AttributeTypes 3 "2010-12-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Members::AttributeTypes \- mananage extended patron attribute types
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.RS 4
my \f(CW@attribute_types\fR = \fIC4::Members::AttributeTypes::GetAttributeTypes()\fR;
.Sp
my \f(CW$attr_type\fR = C4::Members::AttributeTypes\->new($code, \f(CW$description\fR);
\&\f(CW$attr_type\fR\->code($code);
\&\f(CW$attr_type\fR\->description($description);
\&\f(CW$attr_type\fR\->repeatable($repeatable);
\&\f(CW$attr_type\fR\->unique_id($unique_id);
\&\f(CW$attr_type\fR\->opac_display($opac_display);
\&\f(CW$attr_type\fR\->password_allowed($password_allowed);
\&\f(CW$attr_type\fR\->staff_searchable($staff_searchable);
\&\f(CW$attr_type\fR\->authorised_value_category($authorised_value_category);
\&\f(CW$attr_type\fR\->\fIstore()\fR;
\&\f(CW$attr_type\fR\->\fIdelete()\fR;
.Sp
my \f(CW$attr_type\fR = C4::Members::AttributeTypes\->fetch($code);
\&\f(CW$attr_type\fR = C4::Members::AttributeTypes\->delete($code);
.RE
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetAttributeTypes"
.IX Subsection "GetAttributeTypes"
.RS 4
my \f(CW@attribute_types\fR = C4::Members::AttributeTypes::GetAttributeTypes($all_fields);
.RE
.PP
Returns an array of hashrefs of each attribute type defined
in the database.  The array is sorted by code.  Each hashref contains
at least the following fields:
.PP
code
description
.PP
If \f(CW$all_fields\fR is true, then each hashref also contains the other fields from borrower_attribute_types.
.SH "METHODS"
.IX Header "METHODS"
.RS 4
my \f(CW$attr_type\fR = C4::Members::AttributeTypes\->new($code, \f(CW$description\fR);
.RE
.PP
Create a new attribute type.
.SS "fetch"
.IX Subsection "fetch"
.RS 4
my \f(CW$attr_type\fR = C4::Members::AttributeTypes\->fetch($code);
.RE
.PP
Fetches an attribute type from the database.  If no
type with the given \f(CW$code\fR exists, returns undef.
.SS "store"
.IX Subsection "store"
.RS 4
\&\f(CW$attr_type\fR\->\fIstore()\fR;
.RE
.PP
Stores attribute type in the database.  If the type
previously retrieved from the database via the \fIfetch()\fR
method, the \s-1DB\s0 representation of the type is replaced.
.SS "code"
.IX Subsection "code"
.RS 4
my \f(CW$code\fR = \f(CW$attr_type\fR\->\fIcode()\fR;
\&\f(CW$attr_type\fR\->code($code);
.RE
.PP
Accessor.  Note that the code is immutable once
a type is created or fetched from the database.
.SS "description"
.IX Subsection "description"
.RS 4
my \f(CW$description\fR = \f(CW$attr_type\fR\->\fIdescription()\fR;
\&\f(CW$attr_type\fR\->description($description);
.RE
.PP
Accessor.
.SS "repeatable"
.IX Subsection "repeatable"
.RS 4
my \f(CW$repeatable\fR = \f(CW$attr_type\fR\->\fIrepeatable()\fR;
\&\f(CW$attr_type\fR\->repeatable($repeatable);
.RE
.PP
Accessor.  The \f(CW$repeatable\fR argument
is interpreted as a Perl boolean.
.SS "unique_id"
.IX Subsection "unique_id"
.RS 4
my \f(CW$unique_id\fR = \f(CW$attr_type\fR\->\fIunique_id()\fR;
\&\f(CW$attr_type\fR\->unique_id($unique_id);
.RE
.PP
Accessor.  The \f(CW$unique_id\fR argument
is interpreted as a Perl boolean.
.SS "opac_display"
.IX Subsection "opac_display"
.RS 4
my \f(CW$opac_display\fR = \f(CW$attr_type\fR\->\fIopac_display()\fR;
\&\f(CW$attr_type\fR\->opac_display($opac_display);
.RE
.PP
Accessor.  The \f(CW$opac_display\fR argument
is interpreted as a Perl boolean.
.SS "password_allowed"
.IX Subsection "password_allowed"
.RS 4
my \f(CW$password_allowed\fR = \f(CW$attr_type\fR\->\fIpassword_allowed()\fR;
\&\f(CW$attr_type\fR\->password_allowed($password_allowed);
.RE
.PP
Accessor.  The \f(CW$password_allowed\fR argument
is interpreted as a Perl boolean.
.SS "staff_searchable"
.IX Subsection "staff_searchable"
.RS 4
my \f(CW$staff_searchable\fR = \f(CW$attr_type\fR\->\fIstaff_searchable()\fR;
\&\f(CW$attr_type\fR\->staff_searchable($staff_searchable);
.RE
.PP
Accessor.  The \f(CW$staff_searchable\fR argument
is interpreted as a Perl boolean.
.SS "authorised_value_category"
.IX Subsection "authorised_value_category"
.RS 4
my \f(CW$authorised_value_category\fR = \f(CW$attr_type\fR\->\fIauthorised_value_category()\fR;
\&\f(CW$attr_type\fR\->authorised_value_category($authorised_value_category);
.RE
.PP
Accessor.
.SS "delete"
.IX Subsection "delete"
.RS 4
\&\f(CW$attr_type\fR\->\fIdelete()\fR;
C4::Members::AttributeTypes\->delete($code);
.RE
.PP
Delete an attribute type from the database.  The attribute
type may be specified either by an object or by a code.
.SS "num_patrons"
.IX Subsection "num_patrons"
.RS 4
my \f(CW$count\fR = \f(CW$attr_type\fR\->\fInum_patrons()\fR;
.RE
.PP
Returns the number of patron records that use
this attribute type.
.SS "get_patrons"
.IX Subsection "get_patrons"
.RS 4
my \f(CW@borrowernumbers\fR = \f(CW$attr_type\fR\->get_patrons($attribute);
.RE
.PP
Returns the borrowernumber of the patron records that
have an attribute with the specifie value.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <info@koha.org>
.PP
Galen Charlton <galen.charlton@liblime.com>
