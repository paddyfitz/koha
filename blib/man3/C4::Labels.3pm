.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Labels 3"
.TH C4::Labels 3 "2010-12-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Labels \- Functions for printing spine labels and barcodes in Koha
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "get_label_options;"
.IX Subsection "get_label_options;"
.Vb 1
\&        $options = get_label_options()
.Ve
.PP
Return a pointer on a hash list containing info from labels_conf table in Koha \s-1DB\s0.
.SS "sub add_batch"
.IX Subsection "sub add_batch"
.Vb 4
\& add_batch($batch_type,\e@batch_list);
\& if $batch_list is supplied,
\&   create a new batch with those items.
\& else, return the next available batch_id.
.Ve
.SS "GetAllPrinterProfiles;"
.IX Subsection "GetAllPrinterProfiles;"
.Vb 1
\&    @profiles = GetAllPrinterProfiles()
.Ve
.PP
Returns an array of references-to-hash, whos keys are .....
.SS "GetSinglePrinterProfile;"
.IX Subsection "GetSinglePrinterProfile;"
.Vb 1
\&    $profile = GetSinglePrinterProfile()
.Ve
.PP
Returns a hashref whos keys are...
.SS "SaveProfile;"
.IX Subsection "SaveProfile;"
.Vb 1
\&    SaveProfile(\*(Aqparameters\*(Aq)
.Ve
.PP
When passed a set of parameters, this function updates the given profile with the new parameters.
.SS "CreateProfile;"
.IX Subsection "CreateProfile;"
.Vb 1
\&    CreateProfile(\*(Aqparameters\*(Aq)
.Ve
.PP
When passed a set of parameters, this function creates a new profile containing those parameters
and returns any errors.
.SS "DeleteProfile;"
.IX Subsection "DeleteProfile;"
.Vb 1
\&    DeleteProfile(prof_id)
.Ve
.PP
When passed a profile id, this function deletes that profile from the database and returns any errors.
.SS "GetAssociatedProfile;"
.IX Subsection "GetAssociatedProfile;"
.Vb 1
\&    $assoc_prof = GetAssociatedProfile(tmpl_id)
.Ve
.PP
When passed a template id, this function returns the parameters from the currently associated printer profile
in a hashref where key=fieldname and value=fieldvalue.
.SS "SetAssociatedProfile;"
.IX Subsection "SetAssociatedProfile;"
.Vb 1
\&    SetAssociatedProfile($prof_id, $tmpl_id)
.Ve
.PP
When passed both a profile id and template id, this function establishes an association between the two. No more
than one profile may be associated with any given template at the same time.
.SS "GetLabelItems;"
.IX Subsection "GetLabelItems;"
.Vb 1
\&        $options = GetLabelItems()
.Ve
.PP
Returns an array of references-to-hash, whos keys are the fields from the biblio, biblioitems, items and labels tables in the Koha database.
.SS "GetBarcodeData"
.IX Subsection "GetBarcodeData"
.RS 4
Parse labels_conf.formatstring value
(one value of the csv, which has already been split)
and return string from koha tables or \s-1MARC\s0 record.
.RE
.SS "descKohaTables"
.IX Subsection "descKohaTables"
Return a hashref of an array of hashes,
with name,type keys.
.SS "build_circ_barcode;"
.IX Subsection "build_circ_barcode;"
.Vb 2
\&  build_circ_barcode( $x_pos, $y_pos, $barcode,
\&                $barcodetype, \e$item);
.Ve
.PP
\&\f(CW$item\fR is the result of a previous call to \fIGetLabelItems()\fR;
.SS "draw_boundaries"
.IX Subsection "draw_boundaries"
.Vb 2
\& sub draw_boundaries ($x_pos_spine, $x_pos_circ1, $x_pos_circ2,
\&                $y_pos, $spine_width, $label_height, $circ_width)
.Ve
.PP
This sub draws boundary lines where the label outlines are, to aid in printer testing, and debugging.
.SS "drawbox"
.IX Subsection "drawbox"
.Vb 2
\&        sub drawbox {   $lower_left_x, $lower_left_y, 
\&                        $upper_right_x, $upper_right_y )
.Ve
.PP
this is a low level sub, that draws a pdf box, it is called by draw_boxes
.PP
\&\s-1FYI:\s0 the  \f(CW$upper_right_x\fR and \f(CW$upper_right_y\fR values are \s-1RELATIVE\s0 to  \f(CW$lower_left_x\fR and \f(CW$lower_left_y\fR
.PP
and \f(CW$lower_left_x\fR, \f(CW$lower_left_y\fR are \s-1ABSOLUTE\s0, this caught me out!
.SH "AUTHOR"
.IX Header "AUTHOR"
Mason James <mason@katipo.co.nz>
